// <auto-generated />
using System;
using E_Library.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace E_Library.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("E_Library.Model.Announcement", b =>
                {
                    b.Property<Guid>("Announcement_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Announcement_Id");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("E_Library.Model.Book", b =>
                {
                    b.Property<Guid>("Book_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Category_Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Book_Id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("E_Library.Model.Cart", b =>
                {
                    b.Property<Guid>("Cart_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Book_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Book_Id1")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("User_Id1")
                        .HasColumnType("uuid");

                    b.HasKey("Cart_Id");

                    b.HasIndex("Book_Id1");

                    b.HasIndex("User_Id1");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("E_Library.Model.Order", b =>
                {
                    b.Property<Guid>("Order_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("User_Id1")
                        .HasColumnType("uuid");

                    b.HasKey("Order_Id");

                    b.HasIndex("User_Id1");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("E_Library.Model.OrderItem", b =>
                {
                    b.Property<Guid>("OrderItem_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Book_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Book_Id1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Order_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Order_Id1")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("OrderItem_Id");

                    b.HasIndex("Book_Id1");

                    b.HasIndex("Order_Id1");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("E_Library.Model.Review", b =>
                {
                    b.Property<Guid>("Review_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Book_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Book_Id1")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("User_Id1")
                        .HasColumnType("uuid");

                    b.HasKey("Review_Id");

                    b.HasIndex("Book_Id1");

                    b.HasIndex("User_Id1");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("E_Library.Model.User", b =>
                {
                    b.Property<Guid>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Membership_Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Total_Order")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("User_Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("E_Library.Model.Wishlist", b =>
                {
                    b.Property<Guid>("Wishlist_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Book_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Book_Id1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("User_Id1")
                        .HasColumnType("uuid");

                    b.HasKey("Wishlist_Id");

                    b.HasIndex("Book_Id1");

                    b.HasIndex("User_Id1");

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("E_Library.Model.Cart", b =>
                {
                    b.HasOne("E_Library.Model.Book", "Book")
                        .WithMany("Carts")
                        .HasForeignKey("Book_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Library.Model.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("User_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Library.Model.Order", b =>
                {
                    b.HasOne("E_Library.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("User_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Library.Model.OrderItem", b =>
                {
                    b.HasOne("E_Library.Model.Book", "Book")
                        .WithMany("OrderItems")
                        .HasForeignKey("Book_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Library.Model.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("Order_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("E_Library.Model.Review", b =>
                {
                    b.HasOne("E_Library.Model.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("Book_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Library.Model.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("User_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Library.Model.Wishlist", b =>
                {
                    b.HasOne("E_Library.Model.Book", "Book")
                        .WithMany("Wishlists")
                        .HasForeignKey("Book_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Library.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Library.Model.Book", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("E_Library.Model.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("E_Library.Model.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
